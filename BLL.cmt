<#@ template language="c#" HostSpecific="True" #>
<#@ output extension= ".cs" #>
<#
	TableHost host = (TableHost)(Host);		
	string ModelSpace = host.Folder+".Model."+ host.GetModelClass(host.TableName);
	string DALSpace= host.Folder+".DAL."+ host.GetDALClass(host.TableName);
	ColumnInfo identityKey=host.IdentityKey;
	string returnValue = "void";
    if (identityKey!=null)
    {         
         returnValue = CodeCommon.DbTypeToCS(identityKey.TypeName);              
    }
    else  //用于没有自增长列，但是有PrimaryKey的情况，比如第一列的主键是Guid
    {
      for(int i=0;i<host.Fieldlist.Count;++i)
      {
        if(host.Fieldlist[i].IsPrimaryKey)
        {
            returnValue = CodeCommon.DbTypeToCS(host.Fieldlist[i].TypeName);
            identityKey = host.Fieldlist[i];
            break;
        }
      }
    }
    
#>
using System; 
using System.Text;
using System.Collections.Generic; 
using System.Data;
using <#= host.Folder #>.Model;
namespace <#= host.Folder #>.BLL  
{
	<# if( host.TableDescription.Length > 0) {#>
 	//<#= host.TableDescription #>
	<# } #>
	public partial class <#= host.GetBLLClass(host.TableName) #>Bll
	{
   		     
		private readonly <#= DALSpace #> dal=new <#= DALSpace #>();
		private <#= host.GetBLLClass(host.TableName) #>Bll()
		{}
		public static <#= host.GetBLLClass(host.TableName) #>Bll Instance { get; } = new <#= host.GetBLLClass(host.TableName) #>Bll();
		
		#region  Method
		/// <summary>
		/// 是否存在该记录
		/// </summary>
		public bool Exists(<#= CodeCommon.GetInParameter(host.Keys, false) #>)
		{
			return dal.Exists(<#= CodeCommon.GetFieldstrlist(host.Keys, false)#>);
		}

		/// <summary>
		/// 增加一条数据
		/// </summary>
		<#if (identityKey!=null && returnValue!="string") {#>
    public <#= returnValue #>  Add(<#= ModelSpace #> model)
    <#} else {#>
    public void Add(<#= ModelSpace #> model)
    <#}#>
		{
      <#if (identityKey!=null && returnValue!="string") {#>
      return dal.Add(model);
      <#} else {#>
      dal.Add(model);
      <#}#>
		}

		/// <summary>
		/// 更新一条数据
		/// </summary>
		public bool Update(<#= ModelSpace #> model)
		{
			return dal.Update(model);
		}

		/// <summary>
		/// 删除一条数据
		/// </summary>
		public bool Delete(<#=CodeCommon.GetInParameter(host.Keys, true)#>)
		{
			
			return dal.Delete(<#=CodeCommon.GetFieldstrlist(host.Keys, true)#>);
		}

		/// <summary>
		/// 得到一个对象实体
		/// </summary>
		public <#= ModelSpace #> GetModel(<#= CodeCommon.GetInParameter(host.Keys,true) #>)
		{
			
			return dal.GetModel(<#=CodeCommon.GetFieldstrlist(host.Keys, true)#>);
		}

		/// <summary>
		/// 获得数据列表
		/// </summary>
		public DataSet GetList(string strWhere)
		{
			return dal.GetList(strWhere);
		}
		/// <summary>
		/// 获得前几行数据
		/// </summary>
		public DataSet GetList(int Top,string strWhere,string order)
		{
			return dal.GetList(Top,strWhere,order);
		}
		/// <summary>
		/// 获得数据列表
		/// </summary>
		public List<<#= ModelSpace #>> GetModelList(int Top,string strWhere,string order)
		{
			DataSet ds = dal.GetList(Top,strWhere,order);
			return DataTableToList(ds.Tables[0]);
		}
		
    /// <summary>
		/// 获得数据列表
		/// </summary>
		public List<<#= ModelSpace #>> GetModelList(string strWhere)
		{
			DataSet ds = dal.GetList(strWhere);
			return DataTableToList(ds.Tables[0]);
		}
		
    /// <summary>
		/// 获得数据map
		/// </summary>
		public Dictionary<<#= returnValue #>,<#= ModelSpace #>> GetModelMap(string strWhere)
		{
			DataSet ds = dal.GetList(strWhere);
			List<<#= ModelSpace #>> list = DataTableToList(ds.Tables[0]);
			return ListToMap(list);
		}
		
    /// <summary>
		/// 获得数据map
		/// </summary>
		public Dictionary<<#= returnValue #>,<#= ModelSpace #>> GetModelMap(int Top,string strWhere,string order)
		{
			DataSet ds = dal.GetList(Top,strWhere,order);
			List<<#= ModelSpace #>> list = DataTableToList(ds.Tables[0]);
			return ListToMap(list);
		}
		
    /// <summary>
		/// list转成map
		/// </summary>
		public Dictionary<<#= returnValue #>,<#= ModelSpace #>> ListToMap(List<<#= ModelSpace #>> list)
		{
			Dictionary<<#= returnValue #>,<#= ModelSpace #>> map = new Dictionary<<#= returnValue #>,<#= ModelSpace #>>();
			for(int i=0;i<list.Count;++i){
        map.Add(list[i].<#=identityKey.ColumnName#>,list[i]);
			}
			return map;
		}
		
		/// <summary>
		/// 获得数据列表
		/// </summary>
		public List<<#= ModelSpace #>> DataTableToList(DataTable dt)
		{
			List<<#= ModelSpace #>> modelList = new List<<#= ModelSpace #>>();
			int rowsCount = dt.Rows.Count;
			if (rowsCount > 0)
			{
				<#= ModelSpace #> model;
				for (int n = 0; n < rowsCount; n++)
				{
					model = dal.DataRowToModel(dt.Rows[n]);			
          if(model!=null)
            modelList.Add(model);
				}
			}
			return modelList;
		}

		/// <summary>
		/// 获得数据列表
		/// </summary>
		public DataSet GetAllList()
		{
			return GetList("");
		}
		
    /// <summary>
		/// 获取记录总数
		/// </summary>
		public int GetRecordCount(string strWhere)
		{
			return dal.GetRecordCount(strWhere);
		}
		
    /// <summary>
    /// 分页获取数据
    /// </summary>
    public List<<#= ModelSpace #>> GetListByPage(string where, string orderby,int startIndex, int endIndex)
    {
        DataSet ds = dal.GetListByPage(where, orderby, startIndex, endIndex);
        DataTable dt = ds.Tables[0];
        return DataTableToList(dt);
    }
    
    /// <summary>
    /// 分页获取数据
    /// </summary>
    public List<<#= ModelSpace #>> GetListByPage(int pageIndex, int pageSize, string where, string orderby)
    {
        int startIndex = (pageIndex - 1) * pageSize + 1;
        int endIndex = pageIndex * pageSize;
        return GetListByPage(where, orderby, startIndex, endIndex);
    }
    

		
		
		<#if (identityKey!=null) {#>
		
    /// <summary>
    /// 分页获取数据
    /// </summary>
    public List<<#= ModelSpace #>> GetListByPageOrderByPK(int pageIndex, int pageSize, string where)
    {
        int startIndex = (pageIndex - 1) * pageSize + 1;
        int endIndex = pageIndex * pageSize;
        string orderby = "";
        orderby = "<#=identityKey.ColumnName#> desc";          
        return GetListByPage(where, orderby, startIndex, endIndex);
    }
		
    /// <summary>
    /// 新增list
    /// </summary>		
    public int AddList(List<<#= ModelSpace #>> list)
    {
        int res = 0;
        foreach (var item in list)
        {
        <#if(returnValue=="string"){#>
            res += dal.Add(item) ? 0 : 1; //返回值是bool
        <#} else if(returnValue=="Guid") {#>
            res += dal.Add(item) == Guid.Empty ? 0 : 1; //返回值是Guid
        <#} else {#>
            res += dal.Add(item) == 0 ? 0 : 1; //返回值是id
        <#}#>
        }
        return res;
    }

    /// <summary>
    /// 更新list
    /// </summary>
    public int UpdateList(List<<#= ModelSpace #>> list)
    {
        int res = 0;
        foreach (var item in list)
        {
            res += dal.Update(item) ? 1 : 0; //返回值是id
        }
        return res;
    }
    
    /// <summary>
    /// 删除list
    /// </summary>    
    public bool DeleteList(List<<#= ModelSpace #>> list)
    {
        StringBuilder sb = new StringBuilder();
        for (int i = 0; i < list.Count; ++i)
        {
            <#if(returnValue=="string" || returnValue=="Guid"){#>
            sb.AppendFormat("'{0}',", list[i].<#=identityKey.ColumnName#>);
            <#} else {#>
            sb.AppendFormat("{0},", list[i].<#=identityKey.ColumnName#>);
            <#}#>
        }
        string str_id_list = sb.ToString().TrimEnd(',');
        return dal.DeleteList(str_id_list);
    }
		<#}#>
		
		
		
#endregion
   
	}
}